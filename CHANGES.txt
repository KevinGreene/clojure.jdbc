Changelog
---------

Version 0.2.1
~~~~~~~~~~~~~

- `execute-prepared!` now accepts parametrized sql like other `query` methods.
- Minor fixes.


Version 0.2.0b3
~~~~~~~~~~~~~~~

Date: 2014-06-15

- Move jdbc namespace vars to jdbc.core. potemkin is used for conserve
  backward compatibility but it will be removed in 0.3

Version 0.2.0b2
~~~~~~~~~~~~~~~

Date: 2014-06-08

- Add query-first helper function.


Version 0.2.0b1
~~~~~~~~~~~~~~~

Date: 2014-06-04

- Add optional options parameter to `with-transaction` macro.
- Improved `execute-prepared!` function. Now accepts self prepared statements like `query`.
- Improved `make-prepared-statement` function. Now accept string and parametrized vector
  as sql value.
- Pretty dbspec format.
- Read only connections.
- Set schema to connection.


Version 0.1.1
~~~~~~~~~~~~~

Date: 2014-04-06

- Connection pooling is splited to separate module (it preserves same api, but should be
  declared as additional dependency if you want use it).
- Set clojure 1.6 as default clojure version.
- Add apache-commonds dbcp 2.0 connection pool support.
- Breaking change: rename transaction strategy methods to: begin! rollback! commit!
- Breaking change: call-in-transaction now accepts options map insted of named parameters.
- Fix bugs on marking transaction rollback-only.
- Allow set isolation level for transaction.
- Allow set read-only transaction.

Version 0.1-rc1
~~~~~~~~~~~~~~~

Date: 2014-02-16

- jdk6 support added (`java.lang.AutoCloseable` interface is replaced
  with `java.io.Closeable` interface)
- Add ISQLStatement protocol for make easy extend query (and friends) function parameter.
- Performance improvements (with micro bench suite)
- Changed syntax for `with-connection` for more idiomatic way (previous behavior
  mantained for backward compatibility).

Version 0.1-beta5
~~~~~~~~~~~~~~~~~

Date: 2014-01-21

Note: this should be a last beta release.

- Query functions (make-query, query and with-query) now accepts prepared statements.
- Add ability to extend all behavior between some type is set as parameter to prepared statement
  and retrieved from resultset thanks to ``ISQLType`` and ``ISQLResultSetReadColumn`` (this allows
  extend not default types, making it compatible for pass as paramater to jdbc and extend sql types for
  automatically convert them to custom types when are retrieved from resultset).
- Refactored jdbc.types namespace (rename QueryResult to ResultSet and put each type in their own
  namespace and add additional util functions for each type).
- Move all transactions logic to separate namespace, removing it from a main jdbc namespace (breaking change).
- Rename ``execute-statement`` to ``execute-statement!`` for more concise function naming.
- Remove untested and unused ``execute-statement->query-result`` function.


Version 0.1-beta4
~~~~~~~~~~~~~~~~~

Date: 2013-12-14

- Now transaction management is extensible. ITransactionStrategy is exposed and DefaultTransactionStrategy
  is a default implementation that cases with previous transaction behavior. If you want other transaction
  strategy, just implement ITransactionStrategy protocol and pass it to ``call-in-transaction`` function.

- Custom sql types now supported. Extend your type with ISQLType protocol and implement ``as-sql-type``
  function for it, that should return database compatible type.

- Backward incompatible change: ``mark-as-rollback-only!``, ``unmark-rollback-only!`` and ``is-rollback-only?``
  are renamed to more concise names: ``set-rollback!``, ``unset-rollback!`` and ``is-rollback-set?``

- Rollback behavior changed. Now rollback functions only affects a current transaction or subtransaction and
  it never interferes in parent transactions.

- Ensuers inmutablity on connection instance on transaction blocks. Now transaction blocks has only one
  clear defined side-effect: commit/rollback/setAutoCommit operations. Rollback flag is more limited
  side-effect that only change state of connection for current transaction.

- Simplify isolation level setting. Now only can set isolation level on dbspec or on creating connection.
  All global state is removed.

Version 0.1-beta3
~~~~~~~~~~~~~~~~~

Date: 2013-12-08

- Minor code cleaning and function name consistency fixes.
- Expose more private functions as public.
- Fix wrong preconditions and some bugs introduced in previos version.
- Add more tests.

Version 0.1-beta2
~~~~~~~~~~~~~~~~~

Date: 2013-11-25

- Remove some taken code from clojure.java.jdbc
  that are licensed under epl.
- Add ability to set the isolation level.
- Add new ``query`` function.
- Change default behavior for querying a database: now the default
  behavior is evaluate a request because of all jdbc implementation
  retrieves all resulset in memory and use lazy-seq is totally useless.

Version 0.1-beta1
~~~~~~~~~~~~~~~~~

Date: 2013-11-14

- Initial relase
